class Solution {
    public static int merge(int arr[],int temp[],int l,int m,int r){
            int i=l;
            int j=m+1;
            int k=l;
            int inv=0;
        for(int q=l;q<=m;q++){
            while(j<=r && arr[q]>2*(long)arr[j]){ /// move the right side j pointer until the condition is met.....
                j++;
            }
         inv+=(j-(m+1));   
        }
        int right=m+1;
        while(i<=m && right<=r){
                if(arr[i]<=arr[right]){
                    temp[k++]=arr[i++];
                }
                else{
                    temp[k++]=arr[right++];
                     
                }
            }
            while(i<=m){
                temp[k++]=arr[i++];
                
            }
            while(right<=r){
                temp[k++]=arr[right++];
            }
            for(int p=l;p<=r;p++){
                arr[p]=temp[p];
            }
            return inv;
        }
         static int mergesort(int arr[],int temp[],int left,int right){
             int inv=0;
             int mid;
             if(right>left){
                 mid=(left+right)/2;
             inv+=mergesort(arr,temp,left,mid);
                 inv+=mergesort(arr,temp,mid+1,right);
                 inv+=merge(arr,temp,left,mid,right);
                 }
             return inv;
         }
       
    
    
    
    public int reversePairs(int[] nums) {
        int temp[]=new int[nums.length];
       int count=mergesort(nums,temp,0,nums.length-1);
        return count;
    }
     

}
Time complexity-O(nlogn)+O(n)+O(n)
space complexity-O(n)
