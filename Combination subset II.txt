class Solution {
    public void sum_find(int []arr,int tar,List<List<Integer>> ans,ArrayList<Integer>ds,int ind){
        
         
            if(tar==0){
                 
                ans.add(new ArrayList<>(ds));
                return;
            }
            
        
         for(int i=ind;i<arr.length;i++){
             if(i>ind && arr[i]==arr[i-1]) continue;
             
             if(arr[i]>tar)  break;
            ds.add(arr[i]);
            sum_find(arr,tar-arr[i],ans,ds,i+1);
            ds.remove(ds.size()-1);
        }
         
        
    } 
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> ans=new ArrayList<List<Integer>>();
        Arrays.sort(candidates);
        sum_find(candidates,target,ans,new ArrayList<>(),0);
        return ans;
    }
}
Tc-O(2^N)
sc-O(k*x) k elements and x combinations