import java.util.* ;
import java.io.*; 
class pair {
        int first, second;
        public pair(int first, int second)
        {
            this.first = first;
            this.second = second;
        }
}
public class Solution {
  public static String fourSum(int[] arr, int target, int n) {
 
        HashMap<Integer, pair> mp
            = new HashMap<Integer, pair>();
        for (int i = 0; i < n - 1; i++)
            for (int j = i + 1; j < n; j++)
                mp.put(arr[i] + arr[j], new pair(i, j));
 
        // Traverse through all pairs and search
        // for X - (current pair sum).
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                int sum = arr[i] + arr[j];
 
                // If X - sum is present in hash table,
                int X=target;
                if (mp.containsKey(X - sum)) {
 
                    // Making sure that all elements are
                    // distinct array elements and an
                    // element is not considered more than
                    // once.
                    pair p = mp.get(X - sum);
                    if (p.first != i && p.first != j
                        && p.second != i && p.second != j) {
                       
                        return "Yes";
                    }
                }
            }
        }
      return "No";
  }
}

Tc-O(n^2)
sc-O(n^2)
//////////////////////////////////////////////////////////////
print all 2 pairs equal to given sum
 class Solution {
    
    public List<List<Integer>> fourSum(int[] nums, int target) {
        ArrayList<List<Integer>> l=new ArrayList<List<Integer>>();
        int n=nums.length;
        int count=0;
        Arrays.sort(nums);
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                int tar=target-(nums[i]+nums[j]);
                int left=j+1;
                int right=nums.length-1;
                while(left<right){
                    int sum=nums[left]+nums[right];
                    if(sum<tar){
                        left++;
                    }
                    else if(sum>tar)
                    {
                        right--;
                    }
                    else{
                        List<Integer> res=new ArrayList<>();
                        res.add(nums[i]);
                        res.add(nums[j]);
                        res.add(nums[left]);
                        res.add(nums[right]);
                        l.add(res);
                         
                        while(left<right && nums[left]==res.get(2)) ++left;
                        while(left <right && nums[right]==res.get(3)) --right;
                        
                    }
                }
                
                while(j<n-1 && nums[j+1]==nums[j]) ++j;
                
                
            }
            while(i<n-1 && nums[i+1]==nums[i])++i;
        }
        
        return l;
        
        
        
        
    }
}

Tc=O(n^3)+O(Nlogn)
sc=O(1) we never count the space of the return datastructure.....
