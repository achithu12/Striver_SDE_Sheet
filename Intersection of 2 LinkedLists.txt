public class Solution {

	public static int findIntersection(LinkedListNode<Integer> l1, LinkedListNode<Integer> l2) {
		LinkedListNode t1=l1;
        LinkedListNode t2=l2;
        while(t1.next!=null && t2.next!=null){
            t1=t1.next;
            t2=t2.next;
        }
        if(t1.next==null){
            t1=l2;
            while(t2.next!=null){
                t2=t2.next;
                t1=t1.next;
            }
            t2=l1;
            while(t1!=null && t2!=null && t1!=t2){
                t1=t1.next;
                t2=t2.next;
            }
            if(t1!=null){
                return (int)t1.data;
            }
            else{
                return -1;
            }
             
        }
        else{
            t2=l1;
            while(t1.next!=null){
                t2=t2.next;
                t1=t1.next;
            }
            t1=l2;
            while(t1!=null && t2!=null && t1!=t2){
                t1=t1.next;
                t2=t2.next;
            }
            if(t1!=null){
                return (int)t1.data;
            }
            else{
                return -1;
            }
        }
        
//         return -1;
        
        
	}
}


Tc-O(max(n,m))
sc-O(1)