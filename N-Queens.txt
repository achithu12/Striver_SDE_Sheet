import java.util.*;
public class Solution {
    public static boolean isSafe(int arr[][],int row,int col){
 
        int x=row;
        int y=col;
        while(x-->0){
            if(arr[x][y]==1)
            {
                return false;
            }
        }
        x=row;
        y=col;
        while(y-->0){
             if(arr[x][y]==1)
            {
                return false;
            }
        }
         x=row;
        y=col;
        while(x-->0 && y-->0){
             if(arr[x][y]==1)
            {
                return false;
            }
        }
         x=row;
        y=col;
        while(x++<arr.length-1 && y-->0){
               if(arr[x][y]==1)
            {
                return false;
            }
        }
        return true;
    }
    public static void solve(int arr[][],int ind,ArrayList<ArrayList<Integer>> ans){
        
        if(ind>=arr[0].length){
            List<Integer> a=new ArrayList<>();
            for(int i[]:arr){
                for(int j:i){
                    a.add(j);
                }
            }
             //   System.out.println(a);
            ans.add(new ArrayList<>(a));
            return;
        }
        for(int i=0;i<arr.length;i++){
            if(isSafe(arr,i,ind)){
                arr[i][ind]=1;
                solve(arr,ind+1,ans);
                arr[i][ind]=0;
            }
        }
        
        
    }
    public static ArrayList<ArrayList<Integer>> solveNQueens(int n) {
        ArrayList<ArrayList<Integer>> ans=new ArrayList<>();
         int arr[][]=new int[n][n];
         
        solve(arr,0,ans);
        return ans;
    }
}





///////////////////////////////////////////////////////////////////////



class Solution {
     
        
        
        public boolean issafe(int row,int col,char [][]board,int n){
            int duprow=row;
            int dupcol=col;
            while(row>=0 && col>=0){
                if(board[row][col]=='Q') return false;
                row--;
                col--;
                
            }
            row=duprow;
            col=dupcol;
            while(col>=0){
                if(board[row][col]=='Q') return false;
                col--;
                
                
            }
             row=duprow;
            col=dupcol;
            while(row<n && col>=0){
                 if(board[row][col]=='Q') return false;
                row++;
                col--;
            }
            
            return true;
        }
        public void solve(int col,ArrayList<List<String>> ans,char board[][],int n){
            if(col==n){
                ans.add(construct(board));
                return;
            }
            
            
            for(int i=0;i<n;i++){
                if(issafe(i,col,board,n)==true){
                    board[i][col]='Q';
                    solve(col+1,ans,board,n);
                    board[i][col]='.';
                    
                    
                    
                    
                }
            }
            
        }
        
        
        public List<List<String>> solveNQueens(int n) {
        char [][] board=new char[n][n];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
                
                
                
            }
        }
        ArrayList<List<String>> ans=new ArrayList<List<String>>();
        
        solve(0,ans,board,n);
        return ans;
        
        
        
        
        
    }
    public List<String> construct(char board[][]){
        List<String> n=new ArrayList<>();
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            n.add(s);
        }
        return n;
    }
    
    
}


Tc-O(n!*n)
Sc-O(n^2)